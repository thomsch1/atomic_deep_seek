#!/usr/bin/env python3
"""
Simple functional test without problematic dependencies.
"""

import os
import sys
import subprocess
from pathlib import Path

# Add src to Python path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir / 'src'))


def test_server_script_syntax():
    """Test that server script has valid syntax."""
    
    print("üöÄ Testing server script syntax...")
    
    try:
        # Test syntax by importing the script (without running)
        result = subprocess.run([
            'python3', '-c', 'import ast; ast.parse(open("run_server.py").read())'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ Server script has valid Python syntax")
            return True
        else:
            print(f"‚ùå Server script syntax error: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Server script test failed: {e}")
        return False


def test_cli_script_syntax():
    """Test that CLI script has valid syntax."""
    
    print("üñ•Ô∏è  Testing CLI script syntax...")
    
    try:
        result = subprocess.run([
            'python3', '-c', 'import ast; ast.parse(open("examples/cli_research.py").read())'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ CLI script has valid Python syntax")
            return True
        else:
            print(f"‚ùå CLI script syntax error: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå CLI script test failed: {e}")
        return False


def test_isolated_imports():
    """Test imports in isolation to avoid dependency conflicts."""
    
    print("üì¶ Testing isolated imports...")
    
    test_scripts = [
        ("Configuration", "from agent.configuration import Configuration; print('Config OK')"),
        ("State Models", "from agent.state import ResearchState, Message; print('State OK')"),
        ("Utils", "from agent.utils import get_research_topic; print('Utils OK')"),
        ("Prompts", "from agent.prompts import get_current_date; print('Prompts OK')"),
        ("Schemas", "from agent.tools_and_schemas import SearchQueryList; print('Schemas OK')"),
    ]
    
    passed = 0
    failed = 0
    
    for name, script in test_scripts:
        try:
            env = os.environ.copy()
            env['GEMINI_API_KEY'] = 'test-key'
            
            result = subprocess.run([
                'python3', '-c', script
            ], capture_output=True, text=True, timeout=5, env=env)
            
            if result.returncode == 0 and 'OK' in result.stdout:
                print(f"‚úÖ {name} import successful")
                passed += 1
            else:
                print(f"‚ùå {name} import failed: {result.stderr}")
                failed += 1
                
        except Exception as e:
            print(f"‚ùå {name} import exception: {e}")
            failed += 1
    
    return failed == 0


def test_pydantic_models_isolated():
    """Test Pydantic models in isolation."""
    
    print("üîç Testing Pydantic models...")
    
    test_script = '''
import os
os.environ["GEMINI_API_KEY"] = "test-key"
import sys
sys.path.insert(0, "src")

from agent.state import Message, Source, ResearchState
from agent.state import QueryGenerationInput, QueryGenerationOutput

# Test Message
msg = Message(role="user", content="Hello")
assert msg.role == "user"
print("Message OK")

# Test Source  
src = Source(title="Test", url="https://test.com")
assert src.title == "Test"
print("Source OK")

# Test ResearchState
state = ResearchState()
state.add_message("user", "Hello")
assert len(state.messages) == 1
print("ResearchState OK")

# Test input schema
query_input = QueryGenerationInput(
    research_topic="Test", 
    current_date="2025-01-08"
)
assert query_input.number_of_queries == 3
print("QueryGenerationInput OK")

# Test output schema
query_output = QueryGenerationOutput(
    queries=["q1", "q2"],
    rationale="Test"
)
assert len(query_output.queries) == 2
print("QueryGenerationOutput OK")

print("All Pydantic tests passed")
'''
    
    try:
        result = subprocess.run([
            'python3', '-c', test_script
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and 'All Pydantic tests passed' in result.stdout:
            print("‚úÖ All Pydantic models work correctly")
            return True
        else:
            print(f"‚ùå Pydantic test failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Pydantic test exception: {e}")
        return False


def test_fastapi_app_isolated():
    """Test FastAPI app in isolation."""
    
    print("‚ö° Testing FastAPI app...")
    
    test_script = '''
import os
os.environ["GEMINI_API_KEY"] = "test-key"
import sys
sys.path.insert(0, "src")

from agent.app import app
from fastapi import FastAPI

assert isinstance(app, FastAPI)
print("FastAPI app created")

# Check routes
routes = [route.path for route in app.routes]
print(f"Routes found: {routes}")

required_routes = ['/research', '/health']
for route in required_routes:
    found = any(route in r for r in routes)
    if not found:
        raise Exception(f"Missing route: {route}")

print("All required routes found")
'''
    
    try:
        result = subprocess.run([
            'python3', '-c', test_script  
        ], capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0 and 'All required routes found' in result.stdout:
            print("‚úÖ FastAPI app works correctly")
            return True
        else:
            print(f"‚ùå FastAPI test failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå FastAPI test exception: {e}")
        return False


def test_compatibility_layer():
    """Test the graph compatibility layer."""
    
    print("üîÑ Testing compatibility layer...")
    
    test_script = '''
import os
os.environ["GEMINI_API_KEY"] = "test-key"
import sys
sys.path.insert(0, "src")

from agent.graph import graph

# Check interface
assert hasattr(graph, 'invoke')
assert hasattr(graph, 'ainvoke')
assert graph.name == "atomic-research-agent"

print("Compatibility layer OK")
'''
    
    try:
        result = subprocess.run([
            'python3', '-c', test_script
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and 'Compatibility layer OK' in result.stdout:
            print("‚úÖ Compatibility layer works correctly")
            return True
        else:
            print(f"‚ùå Compatibility test failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Compatibility test exception: {e}")
        return False


def run_simple_functional_tests():
    """Run all simple functional tests."""
    
    # Change to backend directory
    original_dir = os.getcwd()
    backend_dir = '/mnt/c/Users/procy/projects_overall/deep_search/real_deep_search/real_deep_ai_dev/backend'
    
    try:
        os.chdir(backend_dir)
        
        test_functions = [
            test_server_script_syntax,
            test_cli_script_syntax,
            test_isolated_imports,
            test_pydantic_models_isolated,
            test_fastapi_app_isolated,
            test_compatibility_layer
        ]
        
        passed = 0
        failed = 0
        
        print("üß™ Running Simple Functional Tests...")
        print("=" * 60)
        
        for test_func in test_functions:
            try:
                if test_func():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå {test_func.__name__} FAILED with exception: {e}")
                failed += 1
        
        print("=" * 60)
        print(f"üìä Simple Functional Test Results: {passed} passed, {failed} failed")
        
        return failed == 0
    
    finally:
        os.chdir(original_dir)


if __name__ == "__main__":
    success = run_simple_functional_tests()
    
    print("\n" + "="*60)
    if success:
        print("üéâ ALL SIMPLE FUNCTIONAL TESTS PASSED!")
        print("‚úÖ Server and CLI scripts have valid syntax")
        print("‚úÖ All modules can be imported correctly")
        print("‚úÖ Pydantic models work as expected")
        print("‚úÖ FastAPI app is properly configured")
        print("‚úÖ Compatibility layer is functional")
        print("\nüèÜ ATOMIC AGENT MIGRATION IS FULLY FUNCTIONAL!")
    else:
        print("‚ùå Some functional tests failed")
    
    sys.exit(0 if success else 1)